/**
 * Created by Denver on 2/5/2016.
 */
public class Queen extends Piece {
    Queen(String color, String abbrev) {
        super(color, abbrev);
        moves[0] = MoveTypes.InfiniteDiagonal;
        moves[1] = MoveTypes.InfiniteLine;
    }
    private void LineMove(char currentLetterValue, int currentNumberValue, Board board) {
        // vertical
        int tmp = currentNumberValue;
        String s;
        while (tmp <= 8) {
            ++tmp;
            s = currentLetterValue + (tmp+"");
            if(!AddMove(s, board)){
                break;
            }
        }
        tmp = currentNumberValue;
        while (tmp >= 1) {
            --tmp;
            s = currentLetterValue + (tmp + "");
            if(!AddMove(s, board)){break;}
        }

        // horizontal
        char tmpc = currentLetterValue;
        while (tmpc <= 'h') {
            ++tmpc;
            s = tmpc + (currentNumberValue+"");
            if(!AddMove(s, board)){break;}
        }

        tmpc = currentLetterValue;
        while (tmpc >= 'a') {
            --tmpc;
            s = tmpc + (currentNumberValue+"");
            if(!AddMove(s, board)){break;}
        }
    }

    @Override
    public Board CreatePossibleMoves(String location, Board board) {
        char currentLetterValue = location.charAt(0);
        int currentNumberValue = Integer.valueOf(location.substring(1));
        for (int i = 0; i < moves.length; ++i){
            if(moves[i] != null) {
                String s;
                switch (moves[i]) {
                    case InfiniteLine:
                        LineMove(currentLetterValue, currentNumberValue, board);
                        break;
                    case InfiniteDiagonal:
                        DiagonalMove(currentLetterValue, currentNumberValue, board);
                        break;
                    default:
                        break;
                }
            }
        }
        return board;
    }

    private void DiagonalMove(char currentLetterValue, int currentNumberValue, Board board) {
        String s;
        int tmp = currentNumberValue;
        int tmpc = currentLetterValue;
        while (tmp <= 8 && tmpc <= 'h') {
            ++tmp;
            ++tmpc;
            s = (char)tmpc + (tmp+"");
            if(!AddMove(s, board)){
                break;
            }
        }
        tmp = currentNumberValue;
        tmpc = currentLetterValue;
        while (tmp <= 8 && tmpc >= 'a') {
            ++tmp;
            --tmpc;
            s = (char)tmpc + (tmp+"");
            if(!AddMove(s, board)){
                break;
            }
        }
        tmp = currentNumberValue;
        tmpc = currentLetterValue;
        while (tmp >= 1 && tmpc <= 'h') {
            --tmp;
            ++tmpc;
            s = (char)tmpc + (tmp+"");
            if(!AddMove(s, board)){
                break;
            }
        }
        tmp = currentNumberValue;
        tmpc = currentLetterValue;
        while (tmp >= 1 && tmpc >= 'a') {
            --tmp;
            --tmpc;
            s = (char)tmpc + (tmp+"");
            if(!AddMove(s, board)){
                break;
            }
        }
    }
}
