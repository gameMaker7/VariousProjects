/**
 * Created by Denver on 2/5/2016.
 */
public class King extends Piece{
    King(String color, String abbrev) {
        super(color, abbrev);
        moves[0] = MoveTypes.KingMove;
        moves[1] = MoveTypes.Castle;
    }
    private void KingMove(char currentLetterValue, int currentNumberValue, Board board) {
        String s;
        if(currentNumberValue+1 <=8){
            s = (currentLetterValue) + ((currentNumberValue + 1) + "");
            AddMove(s, board);
        }
        if(currentNumberValue-1 >=1){
            s = (currentLetterValue) + ((currentNumberValue - 1) + "");
            AddMove(s, board);
        }
        if(currentLetterValue+1 <='h'){
            s = ((char)(currentLetterValue+1)) + (currentNumberValue + "");
            AddMove(s, board);
        }
        if(currentLetterValue-1 >='a'){
            s = ((char)(currentLetterValue-1)) + (currentNumberValue + "");
            AddMove(s, board);
        }
        if(currentLetterValue+1 <='h' && currentNumberValue-1 >=1){
            s = ((char)(currentLetterValue+1)) + ((currentNumberValue - 1) + "");
            AddMove(s, board);
        }
        if(currentLetterValue-1 >='a' && currentNumberValue+1 <=8){
            s = ((char)(currentLetterValue-1)) + ((currentNumberValue + 1) + "");
            AddMove(s, board);
        }
        if(currentLetterValue+1 <='h' && currentNumberValue+1 <=8){
            s = ((char)(currentLetterValue+1)) + ((currentNumberValue + 1) + "");
            AddMove(s, board);
        }
        if(currentLetterValue-1 >='a' && currentNumberValue-1 >=1){
            s = ((char)(currentLetterValue-1)) + ((currentNumberValue - 1) + "");
            AddMove(s, board);
        }
    }
    @Override
    public Board CreatePossibleMoves(String location, Board board) {
        char currentLetterValue = location.charAt(0);
        int currentNumberValue = Integer.valueOf(location.substring(1));
        KingMove(currentLetterValue, currentNumberValue, board);
        KingCastling(currentLetterValue, currentNumberValue, board);
        return board;
    }

    private void KingCastling(char currentLetterValue, int currentNumberValue, Board board) {
        if (!hasMoved) {
                if(CheckPossibleMoves("c1")){
                    AddMove("b1", board);
                }
                if(CheckPossibleMoves("c8")){
                    AddMove("b8", board);
                }
                if(CheckPossibleMoves("f1")){
                    AddMove("g1", board);
                }
                if(CheckPossibleMoves("f8")){
                    AddMove("g8", board);
                }
        }
    }
}
