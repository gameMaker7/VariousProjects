package Swing;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;

import Group.Hero;
import Setup.Game;

public class TavernPanel extends JPanel implements ActionListener{
	JButton recruit = new JButton("Recruit");
	JButton dismiss = new JButton("Dismiss");
	JComboBox<Hero> heroes = new JComboBox<Hero>();
	private JButton team = new JButton("Team");
	private JButton info = new JButton("Hero Info");


	public JComboBox<Hero> getHeroes() {
		return heroes;
	}
	public TavernPanel(){
		heroList();
		buttons();
	}
	private void buttons() {
		recruit.addActionListener(this);
		dismiss.addActionListener(this);
		info.addActionListener(this);
		team.addActionListener(this);
		this.add(team);
		this.add(dismiss);
		this.add(recruit);
		this.add(info);
	}
	private void heroList(){
		this.add(heroes);
	}
	public void updatesheroes(){
		for(Hero remove: Akatar.getParty().heroes.getList()){
			heroes.removeItem(remove);
		}
		
		for(int i =0; i< heroes.getItemCount(); i++){
			heroes.removeItemAt(i);
		}
		
	for(Hero hero: Akatar.getParty().heroes.getList()){

			heroes.addItem(hero);
		}		
		this.repaint();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		//DO THE STUFF
		if(e.getSource() == recruit){
			CharacterBuilder character = new CharacterBuilder();
			
		}
		if(e.getSource() == team){
			TeamBuilder teambuild = new TeamBuilder();
			
		}
		if(e.getSource() == info){
			if(Akatar.getParty().heroes.length() != 0){
			HeroInfo HeroInfo = new HeroInfo((Hero)heroes.getSelectedItem());
			}else{
				BasicWindow alert = new BasicWindow("No heroes in tavern.");
			}
		}
		if(e.getSource() == dismiss){
			if(Akatar.getParty().heroes.length() == 0){
			BasicWindow alert = new BasicWindow("No heroes in tavern.");	
			}else{
			Dismissal leave = new Dismissal();
			updatesheroes();
//			heroes.remove(comp);
			}
		}
	}
	
	class Dismissal extends JFrame implements ActionListener{

		
		private JButton exit;
		private JButton create;
		private JComboBox<Hero> heroes;
		private JPanel dismiss;
		public Dismissal(){
			super("Dissmal");
			this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			Dimension d = new Dimension(300, 400);
			this.setPreferredSize(d);
			
			dismiss = new JPanel();
			exit = new JButton("Exit");
			create = new JButton("Dismiss");
			heroes = new JComboBox<Hero>();
			
			for(Hero hero: Akatar.getParty().heroes.getList()){
				heroes.addItem(hero);
			}	
			
			exit.addActionListener(this);
			create.addActionListener(this);
			
			dismiss.add(exit);
			dismiss.add(create);
			dismiss.add(heroes);
			this.add(dismiss);

			this.pack();
			this.setLocation(1920/2 -(this.getWidth()), 1080/2 - (this.getHeight()));
			this.setVisible(true);

		}
		
		@Override
		public void actionPerformed(ActionEvent e) {
			if(e.getSource() == exit){
				this.dispose();
			}
			if(e.getSource() == create){
				if(Akatar.getParty().heroes.length() == 1){
					BasicWindow alert = new BasicWindow("Cannot Dismiss Heroes at this time.");
				}else{
				Akatar.getParty().heroes.remove((Hero)heroes.getSelectedItem());
				}
				Akatar.getTavern().updatesheroes();
				this.dispose();
			}
			
		}

	}


}
